name: Security Scan and Lint

# WARNING: This workflow is for educational purposes only
# DO NOT USE IN PRODUCTION ENVIRONMENTS

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

# Prevent production deployment
env:
  PRODUCTION_DEPLOYMENT: false

jobs:
  security-scan:
    runs-on: ubuntu-latest
    
    # Security guard: Prevent production deployment
    if: env.PRODUCTION_DEPLOYMENT == 'false'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 bandit safety
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Security scan with bandit
      run: |
        # Bandit security scan (expecting vulnerabilities in this educational repo)
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . -f txt || true
        
    - name: Check for known security vulnerabilities
      run: |
        # Safety check for known vulnerabilities in dependencies
        safety check --json --output safety-report.json || true
        safety check || true
        
    - name: Verify intentional vulnerabilities
      run: |
        echo "Checking for intentional vulnerabilities..."
        grep -r "shell=True" . && echo "âœ“ Command injection vulnerability found (intentional)"
        grep -r "subprocess.run" . && echo "âœ“ Subprocess usage found (intentional)"
        echo "âœ“ Educational vulnerabilities verified"
        
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
          
  docker-build:
    runs-on: ubuntu-latest
    needs: security-scan
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Build Docker image
      run: |
        docker build -t vuln-mcp-server:test .
        echo "âœ“ Docker image built successfully (educational purposes only)"
        
    - name: Test Docker container
      run: |
        # Test that container starts (but don't run the vulnerable server)
        docker run --rm vuln-mcp-server:test python -c "print('Container test successful')"
        echo "âœ“ Container test passed"
        
  production-guard:
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Production deployment guard
      run: |
        echo "ðŸš¨ PRODUCTION DEPLOYMENT BLOCKED ðŸš¨"
        echo "This repository contains intentional vulnerabilities"
        echo "DO NOT DEPLOY TO PRODUCTION ENVIRONMENTS"
        echo "This is for educational purposes only"
        
        # Always fail to prevent accidental production deployment
        if [ "${{ github.ref }}" == "refs/heads/main" ]; then
          echo "Main branch detected - blocking deployment"
          exit 1
        fi