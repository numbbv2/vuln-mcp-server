name: Security Scan and Lint

# WARNING: This workflow is for educational purposes only
# DO NOT USE IN PRODUCTION ENVIRONMENTS

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

# Prevent production deployment
env:
  PRODUCTION_DEPLOYMENT: false

jobs:
  security-scan:
    runs-on: ubuntu-latest
    
    # Security guard: Prevent production deployment
    if: env.PRODUCTION_DEPLOYMENT == 'false'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        
    - name: Install dependencies
      run: |
        go mod download
        go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
        go install honnef.co/go/tools/cmd/staticcheck@latest
        
    - name: Lint with staticcheck
      run: |
        # Go static analysis
        staticcheck ./... || true
        
    - name: Security scan with gosec
      run: |
        # Gosec security scan (expecting vulnerabilities in this educational repo)
        gosec -fmt json -out gosec-report.json ./... || true
        gosec ./... || true
        
    - name: Go vet
      run: |
        # Go vet for common mistakes
        go vet ./... || true
        
    - name: Verify intentional vulnerabilities
      run: |
        echo "Checking for intentional vulnerabilities..."
        grep -r "sh -c" . && echo "âœ“ Command injection vulnerability found (intentional)"
        grep -r "exec.CommandContext" . && echo "âœ“ Command execution found (intentional)"
        echo "âœ“ Educational vulnerabilities verified"
        
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          gosec-report.json
          
  docker-build:
    runs-on: ubuntu-latest
    needs: security-scan
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Build Docker image
      run: |
        docker build -t vuln-mcp-server:test .
        echo "âœ“ Docker image built successfully (educational purposes only)"
        
    - name: Test Docker container
      run: |
        # Test that container starts (but don't run the vulnerable server)
        docker run --rm vuln-mcp-server:test /bin/sh -c "echo 'Container test successful'"
        echo "âœ“ Container test passed"
        
  production-guard:
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Production deployment guard
      run: |
        echo "ðŸš¨ PRODUCTION DEPLOYMENT BLOCKED ðŸš¨"
        echo "This repository contains intentional vulnerabilities"
        echo "DO NOT DEPLOY TO PRODUCTION ENVIRONMENTS"
        echo "This is for educational purposes only"
        
        # Always fail to prevent accidental production deployment
        if [ "${{ github.ref }}" == "refs/heads/main" ]; then
          echo "Main branch detected - blocking deployment"
          exit 1
        fi
